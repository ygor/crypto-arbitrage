@page "/trades"
@using MudBlazor
@using CryptoArbitrage.Application.Interfaces
@using CryptoArbitrage.Domain.Models
@inject IArbitrageRepository ArbitrageRepository
@inject ILogger<Trades> Logger
@implements IDisposable

<PageTitle>Trades - Crypto Arbitrage</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Trade History</MudText>

<MudCard Elevation="2">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Recent Trades</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="Icons.Material.Filled.Refresh" 
                         Color="Color.Primary" 
                         OnClick="RefreshDataAsync" 
                         Disabled="_isLoading" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        @if (_isLoading)
        {
            <div class="d-flex justify-center pa-4">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (_trades?.Any() == true)
        {
            <MudDataGrid Items="@_trades" 
                       Dense="true" 
                       Hover="true" 
                       Striped="true"
                       SortMode="SortMode.Single">
                <Columns>
                    <TemplateColumn Title="Status">
                        <CellTemplate>
                            <MudIcon Icon="@GetStatusIcon(context.Item.IsSuccessful)" 
                                   Color="@GetStatusColor(context.Item.IsSuccessful)" />
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.TradingPair.Symbol" Title="Trading Pair" />
                    <PropertyColumn Property="x => x.BuyExchange" Title="Buy Exchange" />
                    <PropertyColumn Property="x => x.SellExchange" Title="Sell Exchange" />
                    <TemplateColumn Title="Buy Price">
                        <CellTemplate>
                            $@context.Item.BuyPrice.ToString("F4")
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Sell Price">
                        <CellTemplate>
                            $@context.Item.SellPrice.ToString("F4")
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Volume">
                        <CellTemplate>
                            @context.Item.Volume.ToString("F4")
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Profit">
                        <CellTemplate>
                            <MudText Color="@GetProfitColor(context.Item.ActualProfit)">
                                $@context.Item.ActualProfit.ToString("F2")
                            </MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Fees">
                        <CellTemplate>
                            $@context.Item.TotalFees.ToString("F2")
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Execution Time">
                        <CellTemplate>
                            @($"{context.Item.ExecutionTimeMs}ms")
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Executed At">
                        <CellTemplate>
                            <MudText Typo="Typo.caption">
                                @context.Item.ExecutedAt.ToString("MMM dd, HH:mm:ss")
                            </MudText>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        }
        else
        {
            <div class="d-flex flex-column align-center pa-8">
                <MudIcon Icon="Icons.Material.Filled.SwapHoriz" 
                       Size="Size.Large" 
                       Color="Color.Tertiary" />
                <MudText Typo="Typo.h6" Color="Color.Tertiary" Class="mt-4">
                    No trades executed yet
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Tertiary">
                    Enable auto-trading to begin executing arbitrage opportunities
                </MudText>
            </div>
        }
    </MudCardContent>
</MudCard>

@code {
    private ICollection<ArbitrageTradeResult>? _trades;
    private bool _isLoading = true;
    private Timer? _autoRefreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await RefreshDataAsync();
        
        // Auto-refresh every 15 seconds
        _autoRefreshTimer = new Timer(async _ => 
        {
            await InvokeAsync(async () => 
            {
                await RefreshDataAsync();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(15), TimeSpan.FromSeconds(15));
    }

    private async Task RefreshDataAsync()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            // Direct service call - compile-time type safety!
            _trades = await ArbitrageRepository.GetRecentTradesAsync(100);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading trades");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private string GetStatusIcon(bool isSuccessful)
    {
        return isSuccessful ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error;
    }

    private Color GetStatusColor(bool isSuccessful)
    {
        return isSuccessful ? Color.Success : Color.Error;
    }

    private Color GetProfitColor(decimal profit)
    {
        return profit >= 0 ? Color.Success : Color.Error;
    }

    public void Dispose()
    {
        _autoRefreshTimer?.Dispose();
    }
} 