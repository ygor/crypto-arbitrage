#!/bin/bash

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Generating controller interfaces for API controllers...${NC}"

# Define output directory for interfaces
OUTPUT_DIR="Controllers/Generated"

# Create the output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Remove any existing interface files before generating new ones
rm -f "$OUTPUT_DIR"/*.g.cs
echo -e "${YELLOW}Removed existing interface files from $OUTPUT_DIR${NC}"

# Template for the interface header
read -r -d '' INTERFACE_HEADER << 'EOF'
//----------------------
// <auto-generated>
//     Generated using controller method definitions
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'"
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using CryptoArbitrage.Domain.Models;
using Microsoft.AspNetCore.Mvc;

namespace CryptoArbitrage.Api.Controllers.Interfaces
{
EOF

# Generate interface file from known method signatures
generate_interface() {
    CONTROLLER=$1
    INTERFACE_FILE="${OUTPUT_DIR}/I${CONTROLLER}Controller.g.cs"
    
    echo -e "${YELLOW}Generating interface for ${CONTROLLER}Controller...${NC}"
    
    # Create the interface file with header
    echo "$INTERFACE_HEADER" > "$INTERFACE_FILE"
    
    # Add interface declaration
    echo "    /// <summary>" >> "$INTERFACE_FILE"
    echo "    /// Interface for the ${CONTROLLER} controller" >> "$INTERFACE_FILE" 
    echo "    /// </summary>" >> "$INTERFACE_FILE"
    echo "    public interface I${CONTROLLER}Controller" >> "$INTERFACE_FILE"
    echo "    {" >> "$INTERFACE_FILE"
    
    # Add method definitions based on controller type
    case "$CONTROLLER" in
        "Arbitrage")
            cat >> "$INTERFACE_FILE" << 'EOT'
        /// <summary>
        /// Gets arbitrage opportunities with the specified limit.
        /// </summary>
        /// <param name="limit">The maximum number of opportunities to return.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A collection of arbitrage opportunities.</returns>
        Task<ICollection<ArbitrageOpportunity>> GetArbitrageOpportunitiesAsync(int limit, CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets arbitrage trades with the specified limit.
        /// </summary>
        /// <param name="limit">The maximum number of trades to return.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A collection of trade results.</returns>
        Task<ICollection<TradeResult>> GetArbitrageTradesAsync(int limit, CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets arbitrage statistics.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Arbitrage statistics.</returns>
        Task<ArbitrageStatistics> GetArbitrageStatisticsAsync(CancellationToken cancellationToken = default);
EOT
            ;;
        "Opportunities")
            cat >> "$INTERFACE_FILE" << 'EOT'
        /// <summary>
        /// Gets recent arbitrage opportunities with the specified limit.
        /// </summary>
        /// <param name="limit">The maximum number of opportunities to return.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A collection of arbitrage opportunities.</returns>
        Task<ICollection<ArbitrageOpportunity>> GetRecentOpportunitiesAsync(int limit, CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets arbitrage opportunities filtered by time range.
        /// </summary>
        /// <param name="start">The start time.</param>
        /// <param name="end">The end time.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A collection of arbitrage opportunities.</returns>
        Task<ICollection<ArbitrageOpportunity>> GetOpportunitiesByTimeRangeAsync(
            DateTimeOffset? start = null,
            DateTimeOffset? end = null,
            CancellationToken cancellationToken = default);
EOT
            ;;
        "Trades")
            cat >> "$INTERFACE_FILE" << 'EOT'
        /// <summary>
        /// Gets recent trades with the specified limit.
        /// </summary>
        /// <param name="limit">The maximum number of trades to return.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A collection of trade results.</returns>
        Task<ICollection<TradeResult>> GetRecentTradesAsync(int limit, CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets trades filtered by time range.
        /// </summary>
        /// <param name="start">The start time.</param>
        /// <param name="end">The end time.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A collection of trade results.</returns>
        Task<ICollection<TradeResult>> GetTradesByTimeRangeAsync(
            DateTimeOffset? start = null,
            DateTimeOffset? end = null,
            CancellationToken cancellationToken = default);
EOT
            ;;
        "Statistics")
            cat >> "$INTERFACE_FILE" << 'EOT'
        /// <summary>
        /// Gets statistics for the specified time range.
        /// </summary>
        /// <param name="start">The start time.</param>
        /// <param name="end">The end time.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Arbitrage statistics.</returns>
        Task<ArbitrageStatistics> GetStatisticsAsync(
            DateTimeOffset? start = null,
            DateTimeOffset? end = null,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets statistics for today.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>Today's arbitrage statistics.</returns>
        Task<ArbitrageStatistics> GetTodayStatisticsAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets statistics for the current week.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>This week's arbitrage statistics.</returns>
        Task<ArbitrageStatistics> GetWeekStatisticsAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets statistics for the current month.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>This month's arbitrage statistics.</returns>
        Task<ArbitrageStatistics> GetMonthStatisticsAsync(CancellationToken cancellationToken = default);
EOT
            ;;
        "Settings")
            cat >> "$INTERFACE_FILE" << 'EOT'
        /// <summary>
        /// Gets exchange configurations.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A collection of exchange configurations.</returns>
        Task<ICollection<ExchangeConfiguration>> GetExchangeConfigurationsAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Saves exchange configurations.
        /// </summary>
        /// <param name="exchangeConfigs">The exchange configurations to save.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A save response indicating success or failure.</returns>
        Task<SaveResponse> SaveExchangeConfigurationsAsync([FromBody] ICollection<ExchangeConfiguration> exchangeConfigs, CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the arbitrage configuration.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The arbitrage configuration.</returns>
        Task<ArbitrageConfiguration> GetArbitrageConfigurationAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Saves the arbitrage configuration.
        /// </summary>
        /// <param name="arbitrageConfig">The arbitrage configuration to save.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A save response indicating success or failure.</returns>
        Task<SaveResponse> SaveArbitrageConfigurationAsync([FromBody] ArbitrageConfiguration arbitrageConfig, CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the risk profile.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The risk profile.</returns>
        Task<RiskProfileData> GetRiskProfileAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Saves the risk profile.
        /// </summary>
        /// <param name="riskProfile">The risk profile to save.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A save response indicating success or failure.</returns>
        Task<SaveResponse> SaveRiskProfileAsync([FromBody] RiskProfileData riskProfile, CancellationToken cancellationToken = default);

        /// <summary>
        /// Starts the arbitrage bot.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A bot response indicating success or failure.</returns>
        Task<BotResponse> StartBotAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Stops the arbitrage bot.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A bot response indicating success or failure.</returns>
        Task<BotResponse> StopBotAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets the bot status.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The bot status.</returns>
        Task<BotStatus> GetBotStatusAsync(CancellationToken cancellationToken = default);
EOT
            ;;
        "Health")
            cat >> "$INTERFACE_FILE" << 'EOT'
        /// <summary>
        /// Gets the health status of the API.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>The health status.</returns>
        Task<HealthStatus> GetHealthAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets system metrics.
        /// </summary>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>System metrics.</returns>
        Task<SystemMetrics> GetMetricsAsync(CancellationToken cancellationToken = default);
EOT
            ;;
        *)
            echo -e "${RED}Unknown controller type: $CONTROLLER${NC}"
            ;;
    esac
    
    # Close the interface declaration
    echo "    }" >> "$INTERFACE_FILE"
    echo "}" >> "$INTERFACE_FILE"
    
    echo -e "${GREEN}Generated interface for ${CONTROLLER}Controller${NC}"
}

# List of controllers to generate interfaces for
CONTROLLERS=("Arbitrage" "Opportunities" "Trades" "Statistics" "Settings" "Health")

# Generate interfaces for all controllers
for CONTROLLER in "${CONTROLLERS[@]}"; do
    generate_interface "$CONTROLLER"
done

echo -e "${GREEN}Controller interfaces generated successfully!${NC}"
exit 0 