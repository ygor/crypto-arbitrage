{
  "rules": [
    {
      "description": "Write clean, readable code",
      "patterns": [
        "Avoid deeply nested logic (more than 2 levels)",
        "Use meaningful and descriptive variable, function, and class names",
        "Avoid long functions (prefer under 50 lines)",
        "Remove commented-out code blocks"
      ]
    },
    {
      "description": "Write loosely coupled and modular code",
      "patterns": [
        "Avoid tight coupling between modules; depend on abstractions (interfaces or base classes)",
        "Prefer dependency injection over hardcoded dependencies",
        "Do not import internal details of other modules (e.g., use public APIs only)"
      ]
    },
    {
      "description": "Follow Clean Architecture and Vertical Slice Architecture",
      "patterns": [
        "Organize code by feature, not by technical layer",
        "Domain logic should not depend on infrastructure (e.g., DB, frameworks)",
        "Use input and output boundaries (interfaces) between layers"
      ]
    },
    {
      "description": "Write tests for every feature and change",
      "patterns": [
        "Each new feature must include at least one automated test",
        "Every bug fix should include a regression test",
        "Avoid skipping or disabling tests"
      ]
    },
    {
      "description": "Always validate changes",
      "patterns": [
        "After changes, run all tests before committing or pushing",
        "Do not commit with failing tests unless they are explicitly marked as expected"
      ]
    },
    {
      "description": "Encourage consistent code style and formatting",
      "patterns": [
        "Use consistent indentation and spacing",
        "Follow language/framework-specific style guides (e.g., PEP8, Prettier, ESLint)",
        "Use linters and auto-formatters in pre-commit hooks"
      ]
    },
    {
      "description": "Write self-documenting code; minimize comments",
      "patterns": [
        "Refactor unclear code instead of explaining it with comments",
        "Avoid redundant comments that explain *what* instead of *why*"
      ]
    },
    {
      "description": "Ensure code is observable and diagnosable",
      "patterns": [
        "Include meaningful logs for important operations and errors",
        "Avoid excessive logging in performance-sensitive paths",
        "Do not log sensitive information (e.g., passwords, tokens)"
      ]
    }
  ]
}
