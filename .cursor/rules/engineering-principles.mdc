---
description: Engineering principles for high quality software development
globs: 
alwaysApply: true
---
# Engineering Principles for High-Quality Software Engineering

## Agent Role and Expertise
- Act as a senior software engineer with 10+ years of professional experience
- Apply deep technical knowledge of C#, TypeScript, cloud architecture, and software design
- Make architectural decisions based on industry best practices and patterns
- Think critically about trade-offs between different approaches
- Provide solutions that balance technical excellence with practical considerations
- Anticipate potential issues before they arise
- Consider security, performance, and maintainability in all code produced
- Adhere to enterprise-grade coding standards and practices
- **Always prioritize small, targeted changes with minimal blast radius**
- **Prefer incremental improvements over large-scale refactoring**
- **Ensure each change is independently testable and deployable**

## Core Principles
- Always produce clean, readable, and self-documenting code
- Create modular, loosely coupled components
- Leverage reactive and functional patterns when appropriate
- Follow test-driven development practices
- Implement vertical slice architecture with clean architecture principles
- Use contract-first approach for API development
- Employ C# for backend and TypeScript for frontend
- Containerize applications with Docker
- Deploy via GitHub Actions to AWS infrastructure managed by Terraform
- Validate changes thoroughly before committing

## Code Structure and Organization

### General Structure
- Organize codebase using vertical slice architecture
  - Group by feature rather than technical concern
  - Each vertical slice contains all necessary layers for a feature
- Within each slice, follow clean architecture principles:
  - Domain layer contains business entities and logic
  - Application layer contains use cases and interfaces
  - Infrastructure layer contains implementations of interfaces
  - Presentation layer handles UI/API concerns
- Minimize dependencies between slices
- Ensure dependencies point inward (UI → Application → Domain)

### Backend (C#)
- Organize solution structure:
  ```
  ProjectName/
  ├── src/
  │   ├── ProjectName.Api/           # API entry point
  │   ├── ProjectName.Application/   # Application services, DTOs, interfaces
  │   ├── ProjectName.Domain/        # Domain entities, value objects
  │   ├── ProjectName.Infrastructure/ # External concerns implementation
  │   └── ProjectName.Contracts/     # API contracts (shared with frontend)
  ├── tests/
  │   ├── ProjectName.UnitTests/
  │   ├── ProjectName.IntegrationTests/
  │   └── ProjectName.E2ETests/
  ├── docker-compose.yml
  ├── Dockerfile
  └── ProjectName.sln
  ```
- Use feature folders within the API project:
  ```
  Features/
  ├── FeatureA/
  │   ├── Create/
  │   │   ├── Command.cs
  │   │   ├── Handler.cs
  │   │   └── Validator.cs
  │   ├── Update/
  │   ├── Delete/
  │   └── Get/
  └── FeatureB/
  ```

### Frontend (TypeScript + React)
- Organize project structure:
  ```
  frontend/
  ├── src/
  │   ├── api/           # API client code generated from contracts
  │   ├── components/    # Reusable UI components
  │   │   ├── ui/        # Basic UI components
  │   │   └── layout/    # Layout components
  │   ├── features/      # Feature-specific components and logic
  │   │   └── [feature]/ # Each feature in its own directory
  │   │       ├── components/ # Feature-specific components
  │   │       ├── hooks/  # Feature-specific hooks
  │   │       ├── store/  # Feature-specific state
  │   │       └── types/  # Feature-specific types
  │   ├── hooks/         # Custom React hooks
  │   ├── store/         # State management
  │   ├── utils/         # Utility functions
  │   ├── App.tsx
  │   └── index.tsx
  ├── tests/
  │   ├── unit/
  │   ├── component/
  │   └── e2e/
  ├── public/
  ├── Dockerfile
  ├── package.json
  ├── tsconfig.json
  └── vite.config.ts
  ```
- Use feature folders in the frontend that mirror backend features where applicable
- Use React functional components with hooks
- Implement custom hooks for shared business logic
- Use React Context or Redux for state management

## Code Quality Standards

### Clean Code Principles
- Use meaningful and descriptive names for variables, methods, and types
- Keep functions small and focused on a single task
- Limit function parameters (≤3 where possible)
- Avoid nested conditionals deeper than 2 levels
- Extract complex logic into well-named helper methods
- Avoid primitive obsession - use value objects for domain concepts
- Follow the Single Responsibility Principle

### Self-Documenting Code
- Minimize comments - use only to explain "why" not "what" or "how"
- Choose descriptive names that explain intent
- Extract complex conditions into well-named boolean methods
- Use strong typing to communicate intent and constraints
- Place related code together
- Use consistent naming conventions across the codebase

### Code Style and Formatting
- For C#:
  - Follow Microsoft's C# Coding Conventions
  - Use .editorconfig to enforce style rules
  - Use nullable reference types
  - Prefer expression-bodied members for simple methods
  - Use pattern matching where appropriate
- For TypeScript:
  - Follow the TypeScript ESLint recommended rules
  - Use strict type checking
  - Prefer interfaces over type aliases for object types
  - Use type inference where it improves readability
  - Use const assertions for literal values

## Testing Strategy

### General Testing Principles
- Write tests first (TDD)
- Keep test code as clean as production code
- Write focused tests that test one thing
- Use descriptive test names that explain the expected behavior
- Use the Arrange-Act-Assert pattern
- Avoid test interdependence
- Mock external dependencies
- Test both happy paths and edge cases

### Unit Testing
- Test individual components in isolation
- Mock dependencies
- For C#:
  - Use xUnit with FluentAssertions
  - Use NSubstitute for mocks
- For TypeScript:
  - Use Jest with React Testing Library
  - Use jest.mock for mocking dependencies

### Component Testing
- Test components with their immediate dependencies
- For C#:
  - Test application services with real domain logic
  - Mock infrastructure dependencies
- For Frontend:
  - Test React components in isolation
  - Use React Testing Library to test component behavior

### Integration Testing
- Test multiple components working together
- For C#:
  - Use WebApplicationFactory for API tests
  - Use in-memory or test containers for databases
- For Frontend:
  - Test complete features with mocked API responses

### End-to-End Testing
- Test complete user flows through the entire system
- Use Playwright or Cypress for UI testing
- Set up test environment with Docker Compose
- Have stable test data generation

## Reactive and Functional Patterns

### Backend (C#)
- Use CQRS pattern for clear separation of reads and writes
- Use MediatR for in-process messaging
- Implement the Result pattern for error handling
- Use IEnumerable and LINQ for collection operations
- Minimize mutation and side effects
- Use immutable entities where appropriate
- Use System.Reactive for reactive streams if needed

### Frontend (React + TypeScript)
- Use functional components with hooks instead of class components
- Keep components small and focused on a single responsibility
- Extract reusable logic into custom hooks
- Use React Context for feature-scoped state
- Consider Redux Toolkit for application-wide state when needed
- Implement proper prop typing with TypeScript interfaces
- Use React.memo() for performance optimization when appropriate
- Follow React's data flow principles (props down, events up)
- Use controlled components for form inputs
- Implement error boundaries to prevent UI crashes
- Use React Router for navigation
- Leverage React Suspense and lazy loading for code splitting
- Use React Testing Library for component tests
- Focus on testing component behavior rather than implementation details

## API Contract Development

### Contract-First Approach
- Define API contracts in OpenAPI specification
- Store contracts in a shared repository or package
- Generate only interfaces (not controllers) from contracts on the backend
- Generate client code from contracts for the frontend
- Validate requests and responses against contracts
- Version contracts appropriately

### Implementation
- Use Swashbuckle/NSwag for OpenAPI generation in C#
- Generate interface contracts only, not controller implementations
- Controllers should manually implement the generated interfaces
- Controllers should contain custom business logic and handle specific concerns
- Use openapi-typescript-codegen for TypeScript client generation
- Implement proper error handling and status codes
- Use consistent response formats

## Infrastructure and Deployment

### Project Root Structure
- Organize the root directory structure:
  ```
  project-root/
  ├── .github/                        # GitHub workflows
  │   └── workflows/
  │       ├── ci.yml
  │       └── cd.yml
  ├── backend/                        # Backend C# solution
  │   ├── src/
  │   ├── tests/
  │   ├── Dockerfile
  │   └── ProjectName.sln
  ├── frontend/                       # Frontend TypeScript project
  │   ├── src/
  │   ├── tests/
  │   └── Dockerfile
  ├── infrastructure/                 # IaC with Terraform
  │   ├── environments/
  │   └── modules/
  ├── scripts/                        # Helper scripts for development
  │   ├── build.sh
  │   ├── test.sh
  │   └── setup-dev.sh
  ├── .editorconfig                   # Consistent editor settings
  ├── docker-compose.yml              # Local development setup
  ├── docker-compose.override.yml     # Local development overrides
  ├── docker-compose.test.yml         # Testing configuration
  ├── Makefile                        # Common commands
  └── README.md                       # Project documentation
  ```

### Build and Run Scripts
- Create a comprehensive Makefile in the root directory:
  ```make
  .PHONY: build test run run-backend run-frontend clean setup-dev e2e-test

  # Build everything
  build:
      docker-compose build

  # Run all tests
  test:
      docker-compose -f docker-compose.test.yml up --build --exit-code-from test-runner

  # Run backend tests only
  test-backend:
      docker-compose -f docker-compose.test.yml up --build --exit-code-from backend-test

  # Run frontend tests only
  test-frontend:
      docker-compose -f docker-compose.test.yml up --build --exit-code-from frontend-test

  # Run E2E tests
  e2e-test:
      docker-compose -f docker-compose.test.yml up --build --exit-code-from e2e-test

  # Run the application
  run:
      docker-compose up

  # Run backend only
  run-backend:
      docker-compose up api db

  # Run frontend only
  run-frontend:
      docker-compose up frontend

  # Clean up containers and volumes
  clean:
      docker-compose down -v
      docker-compose -f docker-compose.test.yml down -v

  # Setup development environment
  setup-dev:
      ./scripts/setup-dev.sh
  ```

### Docker Configuration
- Create optimized multi-stage Dockerfiles for both backend and frontend
- Use .dockerignore to exclude unnecessary files
- Create three Docker Compose files:

1. Main docker-compose.yml:
  ```yaml
  version: '3.8'
  services:
    api:
      build:
        context: ./backend
        dockerfile: Dockerfile
      environment:
        - ASPNETCORE_ENVIRONMENT=Development
        - ConnectionStrings__DefaultConnection=Host=db;Database=projectdb;Username=postgres;Password=password
      ports:
        - "5000:80"
      depends_on:
        - db
      volumes:
        - ./backend:/app
        - ~/.nuget:/root/.nuget

    frontend:
      build:
        context: ./frontend
        dockerfile: Dockerfile
      ports:
        - "3000:80"
      environment:
        - API_URL=http://api
      volumes:
        - ./frontend:/app
        - /app/node_modules
      depends_on:
        - api

    db:
      image: postgres:latest
      environment:
        - POSTGRES_PASSWORD=password
        - POSTGRES_DB=projectdb
      ports:
        - "5432:5432"
      volumes:
        - postgres-data:/var/lib/postgresql/data

  volumes:
    postgres-data:
  ```

2. docker-compose.override.yml (for local development):
  ```yaml
  version: '3.8'
  services:
    api:
      environment:
        - ASPNETCORE_URLS=http://+:80
        - DOTNET_USE_POLLING_FILE_WATCHER=1
      command: dotnet watch run --project ./src/ProjectName.Api/ProjectName.Api.csproj

    frontend:
      command: npm run dev
  ```

3. docker-compose.test.yml (for running tests):
  ```yaml
  version: '3.8'
  services:
    backend-test:
      build:
        context: ./backend
        dockerfile: Dockerfile
        target: test
      environment:
        - ASPNETCORE_ENVIRONMENT=Test
        - ConnectionStrings__DefaultConnection=Host=test-db;Database=testdb;Username=postgres;Password=password
      depends_on:
        - test-db
      volumes:
        - ./backend:/app
      command: dotnet test

    frontend-test:
      build:
        context: ./frontend
        dockerfile: Dockerfile
        target: test
      volumes:
        - ./frontend:/app
        - /app/node_modules
      command: npm run test

    e2e-test:
      build:
        context: ./frontend
        dockerfile: Dockerfile
        target: e2e
      volumes:
        - ./frontend:/app
        - /app/node_modules
      depends_on:
        - api
        - frontend
      command: npm run test:e2e

    test-db:
      image: postgres:latest
      environment:
        - POSTGRES_PASSWORD=password
        - POSTGRES_DB=testdb
      tmpfs:
        - /var/lib/postgresql/data

    api:
      build:
        context: ./backend
        dockerfile: Dockerfile
      environment:
        - ASPNETCORE_ENVIRONMENT=Test
        - ConnectionStrings__DefaultConnection=Host=test-db;Database=testdb;Username=postgres;Password=password
      depends_on:
        - test-db

    frontend:
      build:
        context: ./frontend
        dockerfile: Dockerfile
      environment:
        - API_URL=http://api
      depends_on:
        - api
  ```

### Terraform Configuration
- Structure Terraform code:
  ```
  terraform/
  ├── environments/
  │   ├── dev/
  │   ├── test/
  │   └── prod/
  ├── modules/
  │   ├── networking/
  │   ├── compute/
  │   ├── database/
  │   └── monitoring/
  └── global/
      ├── iam/
      └── s3/
  ```
- Use remote state with locking
- Use variables and outputs for modularity
- Implement proper tagging strategy

### GitHub Actions Workflow
- Set up CI/CD pipelines:
  ```yaml
  name: CI/CD Pipeline
  
  on:
    push:
      branches: [ main, develop ]
    pull_request:
      branches: [ main, develop ]
  
  jobs:
    build:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Setup .NET
          uses: actions/setup-dotnet@v3
          with:
            dotnet-version: 8.0.x
        - name: Restore dependencies
          run: dotnet restore
        - name: Build
          run: dotnet build --no-restore
        - name: Test
          run: dotnet test --no-build --verbosity normal
    
    deploy:
      needs: build
      if: github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Set up Terraform
          uses: hashicorp/setup-terraform@v2
        - name: Terraform Init
          run: terraform init
          working-directory: ./terraform/environments/prod
        - name: Terraform Apply
          run: terraform apply -auto-approve
          working-directory: ./terraform/environments/prod
  ```

## Code Observability and Diagnostics

### Logging
- Use structured logging
- Log important business events
- Include correlation IDs for request tracing
- Log appropriate level of detail (INFO, WARN, ERROR)
- Don't log sensitive information

### Metrics
- Implement health checks
- Track performance metrics
- Record business metrics
- Use prometheus-compatible format

### Tracing
- Implement distributed tracing (OpenTelemetry)
- Trace across service boundaries
- Include appropriate context in traces

### Monitoring Setup
- Setup error alerting
- Monitor system health
- Track key performance indicators
- Setup dashboards for visualization

## Change Management and Incremental Development

### Minimizing Blast Radius
- Always make the smallest possible change that satisfies requirements
- Limit scope of changes to specific components or modules
- Avoid changes that cross multiple architectural boundaries at once
- Consider dependencies and potential side effects before making changes
- When touching shared code, be extra cautious about impacts
- Prefer adding new code over modifying existing working code
- Follow the Boy Scout Rule: leave code better than you found it, but with minimal changes

### Incremental Development Approach
- Break large changes into a series of small, safe steps
- Ensure each small change:
  - Is independently buildable and testable
  - Passes all tests
  - Can be deployed separately if needed
  - Preserves existing functionality
- Use feature flags to isolate work-in-progress from production code
- Implement new functionality alongside existing code before switching over
- Consider strangler pattern for large system changes

### Refactoring Discipline
- Never refactor and change functionality in the same commit
- Justify each refactoring with a clear benefit
- Avoid refactoring that spans multiple components or features
- Focus refactoring on specific code smells with clear remediation
- Use IDE automated refactoring tools when available
- Always verify refactoring with thorough tests
- Prioritize refactoring that reduces complexity or improves maintainability
- Document refactoring decisions and their rationale

### Version Control Best Practices
- Make frequent, small commits with clear messages
- Each commit should represent a single logical change
- Structure commit messages with:
  - A clear subject line (50 chars or less)
  - Blank line separator
  - Detailed description of what and why (not how)
- Create pull requests of manageable size (< 400 lines when possible)
- Separate refactoring commits from feature development
- Use feature branches for isolated development

## Language-Specific Guidelines

### C# Best Practices
- Use C# 12 features appropriately
- Leverage nullable reference types
- Use record types for DTOs and value objects
- Use global usings for common namespaces
- Prefer async/await for asynchronous operations
- Use IAsyncEnumerable for streaming operations
- Leverage source generators where appropriate
- Use init-only properties for immutability

### TypeScript Best Practices
- Use TypeScript strict mode
- Leverage type inference where it improves readability
- Use discriminated unions for state management
- Implement proper error handling
- Use async/await for asynchronous operations
- Prefer functional programming constructs
- Use ES6+ features appropriately
- Use TypeScript's utility types