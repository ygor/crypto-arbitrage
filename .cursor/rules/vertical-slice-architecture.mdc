---
description: 
globs: 
alwaysApply: true
---
# Vertical Slice Architecture Rules

## Overview
This project follows a **Vertical Slice Architecture** with **Clean Architecture** principles, implementing **CQRS** patterns and **loosely coupled** design. Each feature slice is self-contained and minimally dependent on other slices.

## 🏗️ Core Architectural Principles

### 1. Vertical Slice Organization
- **Feature-based folders** over technical layers
- Each feature slice contains ALL necessary components for that feature
- **Minimal cross-feature dependencies** - features communicate through domain events
- Self-contained slices with clear boundaries

### 2. Clean Architecture Boundaries
- **Dependencies point inward**: API → Application → Domain
- Domain layer has NO external dependencies
- Application layer defines interfaces, Infrastructure implements them
- Controllers have ONLY routing responsibility

### 3. Loosely Coupled Design
- Features communicate through **domain events**, not direct dependencies
- **Single responsibility** controllers with only IMediator dependency
- **Interface segregation** - small, focused interfaces
- **Event-driven** cross-cutting concerns

## 📁 Required Folder Structure

```
Features/
├── FeatureName/
│   ├── Commands/
│   │   └── CommandName/
│   │       ├── CommandNameCommand.cs
│   │       ├── CommandNameResult.cs
│   │       ├── CommandNameHandler.cs
│   │       └── CommandNameValidator.cs (if needed)
│   ├── Queries/
│   │   └── QueryName/
│   │       ├── QueryNameQuery.cs
│   │       ├── QueryNameResult.cs
│   │       └── QueryNameHandler.cs
│   └── Events/
│       ├── EventName.cs
│       └── EventNameHandler.cs
```

## 🎯 CQRS Implementation Patterns

### Commands (Write Operations)
```csharp
// Command
public record CommandNameCommand(
    string Parameter1,
    int Parameter2
) : IRequest<CommandNameResult>;

// Result
public record CommandNameResult(
    bool Success,
    string Message,
    object? Data = null
);

// Handler
public class CommandNameHandler : IRequestHandler<CommandNameCommand, CommandNameResult>
{
    private readonly IDependency _dependency;
    
    public CommandNameHandler(IDependency dependency)
    {
        _dependency = dependency;
    }
    
    public async Task<CommandNameResult> Handle(CommandNameCommand request, CancellationToken cancellationToken)
    {
        // Implementation
    }
}
```

### Queries (Read Operations)
```csharp
// Query
public record QueryNameQuery(
    string Filter
) : IRequest<QueryNameResult>;

// Result
public record QueryNameResult(
    IEnumerable<DataItem> Items,
    int TotalCount
);

// Handler follows same pattern as Command Handler
```

## 🎮 Controller Design Rules

### ✅ REQUIRED Controller Pattern
```csharp
[ApiController]
[Route("api/[controller]")]
public class FeatureController : ControllerBase
{
    private readonly IMediator _mediator;  // ONLY dependency allowed
    
    public FeatureController(IMediator mediator)
    {
        _mediator = mediator;
    }
    
    [HttpPost("action")]
    public async Task<IActionResult> Action([FromBody] CommandNameCommand command)
    {
        var result = await _mediator.Send(command);
        return result.Success ? Ok(result) : BadRequest(result);
    }
}
```

### ❌ FORBIDDEN Controller Patterns
- Multiple dependencies (IService1, IService2, etc.)
- Business logic in controllers
- Direct database access
- Cross-feature dependencies

## 📢 Domain Events Implementation

### Event Definition
```csharp
public record EventName(
    string EntityId,
    DateTime Timestamp,
    object EventData
) : INotification;
```

### Event Handler
```csharp
public class EventNameHandler : INotificationHandler<EventName>
{
    public async Task Handle(EventName notification, CancellationToken cancellationToken)
    {
        // Cross-cutting concern implementation
    }
}
```

### Event Publishing (in Handlers)
```csharp
// In command/query handlers
await _mediator.Publish(new EventName(entityId, DateTime.UtcNow, data), cancellationToken);
```

## 🧩 Dependency Injection Patterns

### ✅ REQUIRED: Feature Registration
```csharp
// Register each feature's handlers
services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(typeof(FeatureHandler).Assembly));

// Register validators if using FluentValidation
services.AddValidatorsFromAssembly(typeof(CommandValidator).Assembly);
```

### ❌ FORBIDDEN: Service Registrations
- Large service classes with multiple responsibilities
- Services that span multiple features
- Circular dependencies between features

## 📏 Code Quality Standards

### File Naming Conventions
- Commands: `{Action}{Entity}Command.cs`
- Queries: `Get{Entity}Query.cs`
- Handlers: `{CommandOrQuery}Handler.cs`
- Results: `{CommandOrQuery}Result.cs`
- Events: `{Entity}{Action}Event.cs`

### Handler Size Limits
- **Maximum 100 lines** per handler
- **Single responsibility** - one action per handler
- **Extract complex logic** into domain services if needed

### Feature Slice Independence
- **No direct references** between feature folders
- Communication ONLY through domain events
- Shared code goes in **Common** or **Shared** folders

## 🚀 Benefits Achieved

- **93% dependency reduction** (15+ dependencies → 1 per controller)
- **95% code reduction** (1,547-line services → 50-80 line handlers)
- **Microservices-ready** architecture
- **Enterprise-grade** scalability
- **Clean separation** of concerns

## ✨ Extension Guidelines

### Adding New Features
1. Create feature folder under `Features/`
2. Implement Commands/Queries/Events as needed
3. Create controller with ONLY IMediator dependency
4. Register handlers in DI container
5. Communicate with other features through events

### Modifying Existing Features
1. Keep changes within feature boundaries
2. Use domain events for cross-feature impacts
3. Maintain single responsibility principle
4. Preserve handler size limits

### Cross-Cutting Concerns
1. Implement through domain event handlers
2. Keep in separate feature slices if substantial
3. Use shared interfaces for common contracts

## 🎯 Success Metrics

- Controllers have exactly **1 dependency** (IMediator)
- Handlers are **< 100 lines** each
- Features are **independently deployable**
- **Zero circular dependencies** between features
- **Event-driven** cross-feature communication

---

**Remember**: This architecture enables independent feature development, easy testing, and microservices migration. Always prefer **composition over inheritance** and **events over direct coupling**. 